[tool.poetry]
name = "3dst-platform"
version = "0.1.0"
description = "Comprehensive AI application platform with multi-engine LLM support and intelligent task processing"
authors = ["Dev Team <dev@example.com>"]
readme = "README.md"
packages = [{include = "llm_server"}, {include = "agent"}, {include = "api"}]

[tool.poetry.dependencies]
python = "^3.12"
# FastAPI and web server
fastapi = "^0.104.0"
uvicorn = {extras=["standard"], version="^0.24.0"}
sse-starlette = "^1.8.2"
# LLM inference (vLLM)
vllm = {version = "^0.2.0", optional = true}
# Data handling
pydantic = "^2.5.0"
aiosqlite = "^0.19.0"
# Tool dependencies
gitpython = "^3.1.40"
# Utilities
requests = "^2.31.0"
aiofiles = "^23.2.1"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
# Linting and formatting
ruff = "^0.1.6"
black = "^23.11.0"
mypy = "^1.7.0"
# Development tools
ipython = "^8.17.0"

[tool.poetry.extras]
vllm = ["vllm"]

[tool.poetry.scripts]
local-llm-server = "api.main:main"
local-llm-test = "pytest"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.black]
target-version = ['py312']
line-length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "llm_server/tests",
    "agent/tests",
    "api/tests",
    "auth/tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["llm_server", "agent", "api", "auth"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]