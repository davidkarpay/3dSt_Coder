{
  "permissions": {
    "allow": [
      "Bash(/c/Python312/python.exe -c \"import sys, json; d=json.load(sys.stdin); print(d.get(''''response'''','''''''')[:500])\")",
      "Bash(/c/Python312/python.exe -m pip install \"passlib[bcrypt]\" \"python-jose[cryptography]\" python-multipart)",
      "Bash(/c/Python312/python.exe -m pip install email-validator)",
      "Bash(/c/Python312/python.exe scripts/create_admin.py create)",
      "Bash(/c/Python312/python.exe create_test_admin.py)",
      "Bash(/c/Python312/python.exe -m pytest api/tests/ -v)",
      "Bash(/c/Python312/python.exe -m pip install pytest pytest-asyncio)",
      "Bash(/c/Python312/python.exe -m pytest llm_server/tests/ -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/ -v)",
      "Bash(/c/Python312/python.exe -m pytest llm_server/tests/ agent/tests/ api/tests/ -v --tb=no)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/ -v --tb=short)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_core.py::TestCodingAgent::test_concurrent_chat_sessions -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_core.py::TestCodingAgent::test_multiple_tool_calls_in_sequence -v -s)",
      "Bash(/c/Python312/python.exe -m pytest api/tests/ -v --tb=short)",
      "Bash(/c/Python312/python.exe -m pytest api/tests/test_api.py::test_health_endpoint -v)",
      "Bash(/c/Python312/python.exe -m pytest llm_server/tests/test_inference.py::TestVLLMEngine::test_generate_streams_tokens -v)",
      "Bash(/c/Python312/python.exe -m pytest auth/tests/ -v)",
      "Bash(/c/Python312/python.exe -m pytest --tb=short --maxfail=3)",
      "Bash(/c/Python312/python.exe -m pytest --tb=short -q)",
      "Bash(ollama:*)",
      "Bash(curl:*)",
      "Bash(findstr:*)",
      "Bash(powershell:*)",
      "Bash(/c/Python312/python.exe --version)",
      "Bash(/c/Python312/python.exe -c \"import fastapi, uvicorn, aiosqlite; print(''Dependencies available'')\")",
      "Bash(where:*)",
      "Bash(/c/Python312/python.exe scripts/create_admin.py --help)",
      "Bash(/c/Python312/python.exe -c \"import fastapi, uvicorn, aiosqlite; print(''âœ… Dependencies installed successfully'')\")",
      "Bash(/c/Python312/python.exe -c \"import fastapi, uvicorn, aiosqlite; print(''Dependencies installed successfully'')\")",
      "Bash(/c/Python312/python.exe scripts/create_admin.py list)",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(dir:*)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py -v)",
      "Bash(/c/Python312/python.exe -c \"from agent.tools import get_available_tools; print(''Tools loaded successfully'')\")",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py::TestSubAgent::test_decompose_task_file_analysis -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel_integration.py -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel_performance.py::TestParallelPerformance::test_parallel_vs_sequential_performance -v)",
      "Bash(/c/Python312/python.exe -m pip install psutil)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py::TestSubAgent::test_decompose_task_test_execution -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py::TestOrchestrator::test_execution_plan_building -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py::TestTaskStatusTransitions -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py::TestTaskStatusTransitions::test_task_status_lifecycle -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py -v --tb=short)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py::TestSubAgent::test_execute_task -v)",
      "Bash(/c/Python312/python.exe -m pytest agent/tests/test_parallel.py agent/tests/test_parallel_integration.py agent/tests/test_parallel_performance.py agent/tests/test_parallel_e2e.py --tb=short -v)",
      "Bash(/c/Python312/python.exe:*)",
      "Bash(git push:*)",
      "Bash(ipconfig)",
      "Bash(netsh advfirewall firewall show rule:*)",
      "Bash(set LLM_ENGINE_TYPE=multi)",
      "Read(//f/My Pictures/AI_Generated/**)",
      "Bash(git add:*)"
    ],
    "deny": [],
    "ask": []
  }
}